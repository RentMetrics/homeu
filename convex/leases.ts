import { mutation, query, action } from "./_generated/server";
import { v } from "convex/values";
import { api } from "./_generated/api";

// 1. Generate an upload URL for the client to upload the lease file
export const generateUploadUrl = mutation({
  args: {},
  handler: async (ctx) => {
    return { url: await ctx.storage.generateUploadUrl() };
  },
});

// 2. Save lease metadata after file upload
export const saveLeaseMetadata = mutation({
  args: {
    userId: v.string(),
    fileId: v.string(),
    fileName: v.string(),
    fileType: v.string(),
    uploadedAt: v.number(),
  },
  handler: async (ctx, args) => {
    const leaseId = await ctx.db.insert("leases", {
      userId: args.userId,
      fileId: args.fileId,
      fileName: args.fileName,
      fileType: args.fileType,
      uploadedAt: args.uploadedAt,
      status: "processing",
    });
    return leaseId;
  },
});

// 3. Get all leases for a user
export const getLeasesByUser = query({
  args: { userId: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("leases")
      .withIndex("by_userId", (q) => q.eq("userId", args.userId))
      .collect();
  },
});

// Action: Process lease with Gemini (LLM)
export const processLeaseWithGemini = action({
  args: { leaseId: v.id("leases") },
  handler: async (ctx, args) => {
    // 1. Get the lease record
    const lease = await ctx.runQuery(api.leases.getLeaseById, { leaseId: args.leaseId });
    if (!lease) throw new Error("Lease not found");

    // 2. Download the file from storage
    const fileBuffer = await ctx.storage.get(lease.fileId);
    if (!fileBuffer) throw new Error("Lease file not found in storage");

    // 3. Send to Google Gemini (placeholder logic)
    // In production, send fileBuffer to Gemini API and parse response
    // For now, mock the response
    const mockAbstract = "This is a sample lease abstract generated by Gemini.";
    const mockTerm = "12 months (Jan 2024 - Dec 2024)";
    const mockRentalAmount = "$1,750/month";

    // 4. Update the lease record with extracted data
    await ctx.runMutation(api.leases.updateLeaseWithHighlights, {
      leaseId: args.leaseId,
      abstract: mockAbstract,
      term: mockTerm,
      rentalAmount: mockRentalAmount,
      status: "complete",
    });
    return { success: true };
  },
});

// Add supporting query and mutation
export const getLeaseById = query({
  args: { leaseId: v.id("leases") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.leaseId);
  },
});

export const updateLeaseWithHighlights = mutation({
  args: {
    leaseId: v.id("leases"),
    abstract: v.string(),
    term: v.string(),
    rentalAmount: v.string(),
    status: v.string(),
  },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.leaseId, {
      abstract: args.abstract,
      term: args.term,
      rentalAmount: args.rentalAmount,
      status: args.status,
    });
    return { success: true };
  },
}); 